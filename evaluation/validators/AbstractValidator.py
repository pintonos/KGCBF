from utils.evaluation_utils import generate_approach_report
from framework.logger import Logger
from framework.utils import read_config


class AbstractValidator:
    """
    A template for a validation approach which should be benchmarked.
    """

    # You must define the name of the validation approach statically (this will appear in the report).
    name = "Abstract Validator Interface (Do not use)"
    # You must also statically define the file path of the validation approach dictionary.
    approach_dictionary = "dictionary.yaml"
    # Finally, you must statically define the output file generated by the approach report.
    output_file = "approach_report.abc"

    def __init__(self, input_graph: str, error_log: Logger) -> None:
        """
        Initializes this validation approach.
        @param input_graph: The file path of the input graph to validate.
        @param error_log: The error log generated by the corruptor module.
        """
        self.input_graph = input_graph
        self.error_log = error_log

    def validate_file(self) -> None:
        """
        Validate the input graph and generate the output file.
        """
        # This needs to be implemented for each approach individually (see existing validators for examples).
        raise NotImplementedError()

    def evaluate_errors(self, report_location: str = "data/report.yaml") -> None:
        """
        Generate the KGCBF report for the given validation approach.
        @param report_location: The location where the KGCBF report should be placed.
        """
        # Generally, this code should work just fine, if validate_file is implemented appropriately
        # and if the approach_dictionary is defined properly.
        self.validate_file()
        generate_approach_report(self.name, self.error_log, read_config(self.approach_dictionary), self.output_file,
                                 kgcbf_report_location=report_location)
